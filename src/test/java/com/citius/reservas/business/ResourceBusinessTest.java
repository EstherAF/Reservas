package com.citius.reservas.business;

import com.citius.reservas.exceptions.UnknownResourceException;
import com.citius.reservas.models.Resource;
import com.citius.reservas.models.ResourceGroup;
import com.citius.reservas.repositories.ResourceGroupRepository;
import com.citius.reservas.repositories.ResourceRepository;
import java.util.List;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.transaction.TransactionConfiguration;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author Esther √Ålvarez Feijoo
 */
@RunWith(SpringJUnit4ClassRunner.class)
@TransactionConfiguration(defaultRollback = true)
@Transactional
@ContextConfiguration(locations = {"classpath:applicationContext-test.xml",
    "classpath:applicationContext-security-test.xml"})
public class ResourceBusinessTest{

    @Autowired
    private ResourceBusiness rb;
    @Autowired
    private ResourceRepository rr;
    @Autowired
    private ResourceGroupRepository rgr;
    
    private Resource res1, res2;
    private ResourceGroup def;
    
    @Before
    public void init(){
        this.def = rgr.find(1);
        
        if (this.def == null) {
            this.def = rgr.create(new ResourceGroup("default"));
        }

        this.res1 = new Resource("name1", def);
        this.res2 = new Resource("name2", def);
        
        this.res1 = rr.create(res1);
        this.res2 = rr.create(res2);
    }
    
    @Test
    public void IoC(){
        assertNotNull(rb.getClass().toString() + "is null", rb);
        assertNotNull(rr.getClass().toString() + "is null", rr);
        assertNotNull(rgr.getClass().toString() + "is null", rgr);
    }
    
    @Test
    public void testReadAll() {
        List<Resource>  l = rb.readAll();
        
        assertTrue(l.contains(res1));
        assertTrue(l.contains(res2));
    }

    @Test
    public void testRead() throws UnknownResourceException {
        Resource r = rb.read(res1.getId());
        
        assertNotNull(r);
        assertTrue(r.equals(res1));
    }

    @Test
    public void testCreate() {
        Resource r = new Resource("nuevo", def);
        Integer quantity = 4;
        List<Resource> created = rb.create(r, quantity);
        
        assertTrue(created.size() == quantity);
        for(int i=0; i<created.size(); i++){
            Resource test = created.get(i);
            assertTrue("Bad autogenerated name for "+(i+1)+":"+test.getName(),
                    test.getName().startsWith(r.getName()) && 
                    test.getName().contains(String.valueOf((i+1)))
            );
            
        }
    }

    @Test
    public void testCreateOrSave() {
        Resource r = new Resource("nuevo2", def);
        Resource created = rb.createOrSave(r);
        
        assertEquals("On create:",r.getName(), created.getName());
        rr.detach(created);
        
        //modify created
        created.setName("new Name");
        r=created;
        
        r = rb.createOrSave(created);
        assertEquals("On update:",r, created);
        
    }

    @Test
    public void testDelete() throws UnknownResourceException {
        assertNotNull(rr.find(this.res1.getId()));
        
        rb.delete(this.res1.getId());
        
        assertNull(rr.find(this.res1.getId()));
    }
}